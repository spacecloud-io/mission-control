import React, { useState, useEffect } from 'react';
import { useParams } from "react-router-dom";
import { connect } from 'react-redux';
import { get, set } from 'automate-redux';
import jwt from 'jsonwebtoken';
import client from '../../../client';
import { SPACE_CLOUD_USER_ID } from '../../../constants';
import ReactGA from 'react-ga';
import Sidenav from '../../../components/sidenav/Sidenav';
import Topbar from '../../../components/topbar/Topbar';
import { Checkbox, Input, Tooltip, Button, Icon } from 'antd';
import '../explorer.css';
import { getProjectConfig } from '../../../utils';
import GraphiQL from 'graphiql';
import 'graphiql/graphiql.css';
import ExplorerTabs from "../../../components/explorer/explorer-tabs/ExplorerTabs"
import GenerateTokenForm from "../../../components/explorer/generateToken/GenerateTokenForm"

const generateAdminToken = secret => {
    return jwt.sign({ id: SPACE_CLOUD_USER_ID }, secret);
};

const Graphql = props => {

    const { projectID } = useParams();

    const [generateTokenModal, setGenerateTokenModal] = useState(false)

    useEffect(() => {
        ReactGA.pageview("/projects/explorer/graphql");
    }, [])

    const getToken = () => {
        return props.useAdminToken ? generateAdminToken(props.secret) : props.userToken
    }

    const graphQLFetcher = (graphQLParams, projectId) => {
        return client.execGraphQLQuery(
            projectId,
            graphQLParams.query,
            graphQLParams.variables,
            getToken()
        );
    }

    return (
        <div className='explorer'>
            <Topbar showProjectSelector />
            <Sidenav selectedItem='explorer' />
            <div className='page-content page-content--no-padding'>
                <ExplorerTabs activeKey="graphql" projectID={projectID} />
                <div style={{ padding: "32px 32px 0" }}>
                    <div className='row'>
                        <Checkbox
                            checked={props.useAdminToken}
                            onChange={e =>
                                props.setUseAdminToken(e.target.checked)
                            }
                        >
                            Use admin token
                        </Checkbox>
                        <Tooltip
                            placement='bottomLeft'
                            title='Use an admin token generated by Space Cloud to bypass all security rules for this request '
                        >
                            <Icon
                                type='info-circle'
                                style={{ color: 'rgba(0,0,0,.45)' }}
                            />
                        </Tooltip>
                    </div>
                    {!props.useAdminToken && (
                        <div className='row' style={{ display: "flex" }}>
                            <Input.Password
                                placeholder='JWT Token'
                                value={props.userToken}
                                onChange={e => props.setUserToken(e.target.value)}
                            />
                            <Button onClick={() => setGenerateTokenModal(true)}>
                                Generate Token
                            </Button>
                        </div>
                    )
                    }
                    <div className='graphql' style={{ marginTop: 10 }}>
                        <GraphiQL
                            fetcher={graphQLParams =>
                                graphQLFetcher(graphQLParams, props.projectId)
                            }
                            schema={null}
                        />
                    </div>
                </div>
                {generateTokenModal && <GenerateTokenForm
                    handleCancel={() => setGenerateTokenModal(false)}
                    handleSubmit={props.setUserToken}
                    initialToken={getToken()}
                    secret={props.secret}
                />}
            </div>
        </div>
    )

};

const mapStateToProps = (state, ownProps) => {
    const projectId = ownProps.match.params.projectID
    return {
        secret: getProjectConfig(state.projects, projectId, "secret"),
        projectId: projectId,
        useAdminToken: get(
            state,
            'uiState.explorer.useAdminToken',
            true
        ),
        userToken: get(state, 'uiState.explorer.userToken')
    };
};

const mapDispatchToProps = dispatch => {
    return {
        setUseAdminToken: (useAdminToken) => {
            dispatch(set('uiState.explorer.useAdminToken', useAdminToken))
        },
        setUserToken: (userToken) => {
            dispatch(set('uiState.explorer.userToken', userToken))
        }
    };
};

export default connect(
    mapStateToProps,
    mapDispatchToProps
)(Graphql);