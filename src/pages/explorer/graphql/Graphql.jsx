import React, { useState, useEffect } from 'react';
import { useParams } from "react-router-dom";
import { connect } from 'react-redux';
import { get, set } from 'automate-redux';
import client from '../../../client';
import ReactGA from 'react-ga';
import Sidenav from '../../../components/sidenav/Sidenav';
import Topbar from '../../../components/topbar/Topbar';
import { InfoCircleOutlined } from '@ant-design/icons';
import { Checkbox, Input, Tooltip, Button } from 'antd';
import '../explorer.css';
import GraphiQL from 'graphiql';
import 'graphiql/graphiql.css';
import ExplorerTabs from "../../../components/explorer/explorer-tabs/ExplorerTabs"
import GenerateTokenForm from "../../../components/explorer/generateToken/GenerateTokenForm"
import { getJWTSecret } from '../../../operations/projects';
import { generateInternalToken } from '../../../utils';

const Graphql = props => {

  const { projectID } = useParams();

  const [generateTokenModal, setGenerateTokenModal] = useState(false)

  useEffect(() => {
    ReactGA.pageview("/projects/explorer/graphql");
  }, [])

  const getToken = () => {
    return props.useInternalToken ? props.internalToken : props.userToken
  }

  const graphQLFetcher = (graphQLParams, projectId) => {
    return client.execGraphQLQuery(
      projectId,
      graphQLParams.query,
      graphQLParams.variables,
      getToken()
    );
  }
  return (
    <div className='explorer'>
      <Topbar showProjectSelector />
      <Sidenav selectedItem='explorer' />
      <div className='page-content page-content--no-padding'>
        <ExplorerTabs activeKey="graphql" projectID={projectID} />
        <div style={{ padding: "32px 32px 0" }}>
          <div className='row'>
            <Checkbox
              checked={props.useInternalToken}
              onChange={e =>
                props.setUseInternalToken(e.target.checked)
              }
            >
              Bypass security rules
                        </Checkbox>
            <Tooltip
              placement='bottomLeft'
              title='Use an internal token generated by Space Cloud to bypass all security rules for this request '
            >
              <InfoCircleOutlined style={{ color: 'rgba(0,0,0,.45)' }} />
            </Tooltip>
          </div>
          {!props.useInternalToken && (
            <div className='row' style={{ display: "flex" }}>
              <Input.Password
                placeholder='JWT Token'
                value={props.userToken}
                onChange={e => props.setUserToken(e.target.value)}
              />
              <Button onClick={() => setGenerateTokenModal(true)}>
                Generate Token
                            </Button>
            </div>
          )
          }
          <div className='graphql' style={{ marginTop: 10 }}>
            <GraphiQL
              query={props.query}
              variables={props.variables}
              fetcher={graphQLParams =>
                graphQLFetcher(graphQLParams, props.projectId)
              }
              schema={null}
            />
          </div>
        </div>
        {generateTokenModal && <GenerateTokenForm
          handleCancel={() => setGenerateTokenModal(false)}
          handleSubmit={props.setUserToken}
          initialToken={getToken()}
          secret={props.secret}
        />}
      </div>
    </div>
  );

};

const mapStateToProps = (state, ownProps) => {
  const projectId = ownProps.match.params.projectID
  return {
    secret: getJWTSecret(state, projectId),
    projectId: projectId,
    query: state.uiState.graphiql.query,
    variables: state.uiState.graphiql.variables,
    useInternalToken: get(
      state,
      'uiState.explorer.useInternalToken',
      true
    ),
    userToken: get(state, 'uiState.explorer.userToken'),
    internalToken: generateInternalToken(state, projectId) 
  };
};

const mapDispatchToProps = dispatch => {
  return {
    setUseInternalToken: (useInternalToken) => {
      dispatch(set('uiState.explorer.useInternalToken', useInternalToken))
    },
    setUserToken: (userToken) => {
      dispatch(set('uiState.explorer.userToken', userToken))
    }
  };
};

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(Graphql);